# Copyright 2013 by Davide Nunes and University of Lisbon
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0 = simple.params

print-params = true
#generations = 51
breedthreads = 1
evalthreads = 1
seed.0 = 1

nostore = true 				





#================================================================================
# Set up population
#================================================================================
pop.subpops = 1
pop.subpop.0 = ec.Subpopulation

pop.subpop.0.size = 50
pop.subpop.0.species = ec.cgp.genome.CGPSpecies

pop.subpop.0.species.ind = ec.cgp.genome.CGPIndividual


# Because we need default min/max genes even if we don't use them
#CGP species extends FloatVectorIndividual
#pop.subpop.0.species.min-gene = 0.0
#pop.subpop.0.species.max-gene = 1.0

# Per-gene mutation probability of 1.0
pop.subpop.0.species.mutation-prob = 0.1

#================================================================================
# Our own fitness.  A simple modification that makes smaller fitnesses better.
#================================================================================
pop.subpop.0.species.fitness = ec.cgp.FitnessCGP

#================================================================================
# Mutation rate
#================================================================================
pop.subpop.0.species.mutation-prob.0 = .2


#================================================================================
# Function lookup table class for use by the CGP function evaluator.
# This class is expected to implement CGPFunctions.
#================================================================================
pop.subpop.0.species.function-set = cgp.functionsets.Arithmetic

# number of nodes in CGP, not including inputs and outputs.
pop.subpop.0.species.num-nodes = 10

# number of input nodes in your CGP.  Your problem class feeds these inputs to the CGPInterpreter. 
#one is for a constant
pop.subpop.0.species.num-inputs = 2

# number of output nodes in your CGP.  Your problem class extracts these outputs from the CGPInterpreter.
pop.subpop.0.species.num-outputs = 1  


#================================================================================
# First, two parents are selected via tournament selection (size 2).  The parents
# are recombined using convex crossover at the rate specified by 
# crossover-prob.  The children are then mutated.
#================================================================================
pop.subpop.0.species.pipe = ec.vector.breed.VectorMutationPipeline
#pop.subpop.0.species.pipe.source.0 = ec.select.TournamentSelection
#pop.subpop.0.species.pipe.source.0.size = 20
pop.subpop.0.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.0.size = 20
pop.subpop.0.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1.size = 20

#================================================================================
# Class that sets up the regression problem.  Invokes the CGPEvaluator on all
# possible boolean inputs.  The CGPEvaluator computes the output value of the 
# function represented by the genome.  
#================================================================================
eval.problem = cgp.problems.Regression


#================================================================================
# Our custom stats class prints out newly discovered best-of run individuals
# as they are discovered.
#================================================================================
stat = ec.cgp.Stats



